{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Infrastructure for deploying a secure static site and creating a deployment IAM user for CI infrastructure",
  "Parameters": {
    "SiteDomainName": {
      "AllowedPattern": "^(\\*\\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$",
      "Type": "String",
      "Default": "example.ethvault.dev",
      "Description": "Enter the domain name for the site"
    },
    "XFrameOptionsHeader": {
      "Type": "String",
      "AllowedPattern": "^(deny|sameorigin|allow from all)$",
      "Default": "deny",
      "Description": "The value of the X-Frame-Options header to be sent in the response.",
      "AllowedValues": [
        "deny",
        "sameorigin",
        "allow from all"
      ]
    },
    "ContentSecurityPolicyHeader": {
      "Type": "String",
      "AllowedPattern": "^[^\"]+$",
      "Default": "default-src 'none'; frame-ancestors 'none'; font-src 'self' fonts.gstatic.com; img-src 'self' www.google-analytics.com; script-src 'self' www.google-analytics.com; style-src 'self' fonts.googleapis.com",
      "Description": "The value of the Content-Security-Policy header to be sent in the response."
    }
  },
  "Conditions": {
    "XFrameOptionsHeaderAllowFromAll": {
      "Fn::Equals": [
        {
          "Ref": "XFrameOptionsHeader"
        },
        "allow from all"
      ]
    }
  },
  "Outputs": {
    "DeploymentAccessKeyId": {
      "Description": "Access key ID for deploying to the S3 bucket",
      "Value": {
        "Ref": "DeploymentUserAccessKey"
      }
    },
    "DeploymentSecretAccessKey": {
      "Description": "Secret access key for deploying to the S3 bucket",
      "Value": {
        "Fn::GetAtt": [
          "DeploymentUserAccessKey",
          "SecretAccessKey"
        ]
      }
    }
  },
  "Resources": {
    "LambdaCloudFrontEdgeExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "edgelambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "AddSecurityHeadersLambda": {
      "Type": "AWS::Lambda::Function",
      "Version": 3,
      "Properties": {
        "Description": "Set security headers on CloudFront distribution response",
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaCloudFrontEdgeExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "'use strict';",
                "exports.handler = (event, context, callback) => {",
                "  const response = event.Records[0].cf.response;",
                "  const headers = response.headers;",
                "  headers['strict-transport-security'] = [{ key: 'Strict-Transport-Security', value: 'max-age=31536000; includeSubdomains; preload' }];",
                "  headers['content-security-policy'] = [{ key: 'Content-Security-Policy', value: \"",
                {
                  "Ref": "ContentSecurityPolicyHeader"
                },
                ",\" }];",
                "  headers['x-content-type-options'] = [{ key: 'X-Content-Type-Options', value: 'nosniff' }];",
                {
                  "Fn::If": [
                    "XFrameOptionsHeaderAllowFromAll",
                    "",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "  headers['x-frame-options'] = [{ key: 'X-Frame-Options', value: '",
                          {
                            "Ref": "XFrameOptionsHeader"
                          },
                          "' }];"
                        ]
                      ]
                    }
                  ]
                },
                "  headers['x-xss-protection'] = [{ key: 'X-XSS-Protection', value: '1; mode=block' }];",
                "  headers['referrer-policy'] = [{ key: 'Referrer-Policy', value: 'same-origin' }];",
                "  callback(null, response);",
                "};"
              ]
            ]
          }
        }
      }
    },
    "AddSecurityHeadersLambdaVersion": {
      "Type": "AWS::Lambda::Version",
      "Properties": {
        "Description": "The single version of this lambda that is used",
        "FunctionName": {
          "Fn::GetAtt": [
            "AddSecurityHeadersLambda",
            "Arn"
          ]
        }
      }
    },
    "DeploymentUser": {
      "Type": "AWS::IAM::User",
      "Description": "The user that will be used to deploy to the assets bucket",
      "Properties": {
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "1",
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "AssetsBucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "AssetsBucket"
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            },
            "PolicyName": "deploy-to-assets-bucket"
          }
        ]
      }
    },
    "DeploymentUserAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Description": "Access key for the deployment user",
      "Properties": {
        "UserName": {
          "Ref": "DeploymentUser"
        }
      }
    },
    "ACMCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Description": "The certificate used to secure the CloudFront distribution",
      "Properties": {
        "DomainName": {
          "Ref": "SiteDomainName"
        },
        "ValidationMethod": "DNS",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "SiteDomainName"
            }
          },
          {
            "Key": "Stack",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "AssetsBucket": {
      "Type": "AWS::S3::Bucket",
      "Description": "Bucket containing the site deployed files",
      "Properties": {
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "Template",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      }
    },
    "AssetsBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Description": "Policy that allows the CloudFront access identity to read from the bucket",
      "Properties": {
        "Bucket": {
          "Ref": "AssetsBucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowCloudFront",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ",
                      {
                        "Ref": "CloudFrontAccessIdentity"
                      }
                    ]
                  ]
                }
              },
              "Action": [
                "s3:GetObject",
                "s3:ListBucket"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AssetsBucket",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "AssetsBucket",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Sid": "DenyPutFromOtherUsers",
              "Effect": "Deny",
              "NotPrincipal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentUser",
                    "Arn"
                  ]
                }
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "AssetsBucket",
                        "Arn"
                      ]
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "CloudFrontAccessIdentity": {
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
      "Description": "Identity used to read from the assets bucket",
      "Properties": {
        "CloudFrontOriginAccessIdentityConfig": {
          "Comment": {
            "Ref": "AWS::StackName"
          }
        }
      }
    },
    "CloudFrontDistribution": {
      "Type": "AWS::CloudFront::Distribution",
      "Description": "Distribution that produces a CNAME for the assets bucket",
      "Properties": {
        "Tags": [
          {
            "Key": "Template",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "DistributionConfig": {
          "CustomErrorResponses": [
            {
              "ResponseCode": 200,
              "ErrorCode": 404,
              "ErrorCachingMinTTL": 0,
              "ResponsePagePath": "/"
            }
          ],
          "Comment": {
            "Ref": "SiteDomainName"
          },
          "Enabled": true,
          "Aliases": [
            {
              "Ref": "SiteDomainName"
            }
          ],
          "DefaultRootObject": "index.html",
          "HttpVersion": "http2",
          "Origins": [
            {
              "DomainName": {
                "Fn::GetAtt": [
                  "AssetsBucket",
                  "DomainName"
                ]
              },
              "Id": "assets-bucket",
              "S3OriginConfig": {
                "OriginAccessIdentity": {
                  "Fn::Join": [
                    "/",
                    [
                      "origin-access-identity",
                      "cloudfront",
                      {
                        "Ref": "CloudFrontAccessIdentity"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Ref": "ACMCertificate"
            },
            "SslSupportMethod": "sni-only"
          },
          "DefaultCacheBehavior": {
            "Compress": true,
            "AllowedMethods": [
              "GET",
              "HEAD"
            ],
            "LambdaFunctionAssociations": [
              {
                "EventType": "origin-response",
                "LambdaFunctionARN": {
                  "Ref": "AddSecurityHeadersLambdaVersion"
                }
              }
            ],
            "ForwardedValues": {
              "QueryString": false
            },
            "TargetOriginId": "assets-bucket",
            "ViewerProtocolPolicy": "redirect-to-https"
          }
        }
      }
    }
  }
}